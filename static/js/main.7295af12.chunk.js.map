{"version":3,"sources":["index.js"],"names":["Square","props","classNames","isWinner","push","className","join","onClick","value","Board","board","i","row","j","squareNumber","squares","winners","includes","Game","state","history","Array","fill","latestEntry","stepNumber","xIsNext","isAscending","handleSort","bind","this","slice","length","calculateWinner","setState","concat","step","Math","floor","status","current","winner","moves","map","move","desc","location","jumpTo","player","ascending","handleClick","winningSquares","reverse","React","Component","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7295af12.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  let classNames = [\"square \"];\r\n  if(props.isWinner) classNames.push(\"winner\");\r\n\r\n  return (\r\n    <button className={classNames.join(\" \")} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board(props) {\r\n  const numOfRows = 3;\r\n  const squaresPerRow = 3;\r\n  const board = [];\r\n  \r\n  for(let i = 0; i < numOfRows; i++) {\r\n    const row = [];\r\n  \r\n    for(let j = 0; j < squaresPerRow; j++) {\r\n      const squareNumber = (i * numOfRows + j);\r\n      row.push(\r\n        <Square \r\n          key={'square' + squareNumber}\r\n          value={props.squares[squareNumber]}\r\n          onClick={() => props.onClick(squareNumber)}\r\n          isWinner={props.winners && props.winners.includes(squareNumber)}/>\r\n      );\r\n    }\r\n    \r\n    board.push(<div className=\"board-row\" key={row + i}>{row}</div>);\r\n  }\r\n  return <div>{board}</div>\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        latestEntry: '',\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isAscending: true,\r\n    };\r\n    this.handleSort = this.handleSort.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if(calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        latestEntry: i,\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  location(i) {\r\n    let row = Math.floor(i / 3);\r\n    let col = i % 3;\r\n    return ' (' + row + ', ' + col + ') ';\r\n  }\r\n\r\n  handleSort() {\r\n    this.setState({\r\n      isAscending: !this.state.isAscending,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? 'Go to move #' + move + this.location(step.latestEntry) :\r\n                          'Go to game start';\r\n\r\n      return(\r\n        <li key={move}>\r\n          <button \r\n            onClick={() => this.jumpTo(move)} \r\n            className={this.state.stepNumber === move ? 'select' : ''}>\r\n              {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    })\r\n\r\n    let status;\r\n    if(winner) {\r\n      status = 'Winner: ' + winner.player;\r\n    } else if(!current.squares.includes(null)){\r\n      status = 'Draw!';\r\n    } else {\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    const ascending = this.state.isAscending;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winners={winner ? winner.winningSquares : null}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={this.handleSort}>{ascending ? \"Descending\" : \"Ascending\"}</button>\r\n          <ol>{!ascending ? moves.reverse() : moves }</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { \r\n        player: squares[a],\r\n        winningSquares: lines[i], \r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}"],"sourceRoot":""}